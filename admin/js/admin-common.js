// ===== Admin Common (token + guards + fetch helpers) =====

function token() {
  // D√ôNG DUY NH·∫§T key 'adminToken'
  return localStorage.getItem("adminToken");
}

function jsonHeaders() {
  // Header cho JSON API
  return { "Content-Type": "application/json", "x-admin-token": token() || "" };
}

async function authGuard() {
  // B·ªè qua trang ƒëƒÉng nh·∫≠p
  if (location.pathname.endsWith("/login.html")) return;
  if (!token()) location.href = "/admin/login.html";
}
document.addEventListener("DOMContentLoaded", authGuard);

// ƒêƒÉng xu·∫•t
const lo = document.getElementById("logout");
if (lo) {
  lo.addEventListener("click", (e) => {
    e.preventDefault();
    localStorage.removeItem("adminToken");
    location.href = "/admin/login.html";
  });
}

// --- Helpers ---
// JSON fetch (t·ª± g·∫Øn Content-Type: application/json)
window.__adminFetch = async (path, opts = {}) => {
  const r = await fetch(path, {
    ...opts,
    headers: { ...(opts.headers || {}), ...jsonHeaders() },
  });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
};

// RAW fetch cho FormData / multipart (KH√îNG g·∫Øn Content-Type)
window.__adminFetchRaw = async (path, opts = {}) => {
  const headers = new Headers(opts.headers || {});
  const t = token();
  if (t) headers.set("x-admin-token", t);
  const r = await fetch(path, { ...opts, headers });
  return r; // n∆°i g·ªçi t·ª± x·ª≠ l√Ω .ok/.json()
};

window.__headers = jsonHeaders;

/* ===================== Web Push setup ===================== */
// Y√™u c·∫ßu: server c√≥ c√°c route:
//   GET  /api/push/publicKey   (requireAdmin)
//   POST /api/push/subscribe   (requireAdmin)
// ƒê·ªìng th·ªùi ph·∫£i c√≥ file /sw.js ·ªü th∆∞ m·ª•c public (service worker hi·ªÉn th·ªã notification).

(function setupWebPushButton() {
  // Ch·ªâ th√™m ·ªü c√°c trang admin (tr·ª´ trang login)
  if (location.pathname.endsWith("/login.html")) return;

  const container = document.querySelector("main.container") || document.body;
  const wrap = document.createElement("div");
  wrap.style.display = "flex";
  wrap.style.gap = "10px";
  wrap.style.margin = "0 0 10px 0";

  const btnOn = document.createElement("button");
  btnOn.className = "btn";
  btnOn.textContent = "üì£ B·∫≠t th√¥ng b√°o tr√™n ƒëi·ªán tho·∫°i";

  const btnOff = document.createElement("button");
  btnOff.className = "btn";
  btnOff.textContent = "üîï T·∫Øt th√¥ng b√°o";
  btnOff.style.display = "none";

  wrap.appendChild(btnOn);
  wrap.appendChild(btnOff);
  container.prepend(wrap);

  function isSupported() {
    return (
      "Notification" in window &&
      "serviceWorker" in navigator &&
      "PushManager" in window
    );
  }

  function urlBase64ToUint8Array(base64String) {
    const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, "+")
      .replace(/_/g, "/");
    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i)
      outputArray[i] = rawData.charCodeAt(i);
    return outputArray;
  }

  async function getReg() {
    try {
      const reg = await navigator.serviceWorker.getRegistration("/sw.js");
      return reg || (await navigator.serviceWorker.register("/sw.js"));
    } catch (e) {
      console.error("SW register error:", e);
      return null;
    }
  }

  async function refreshButtons() {
    if (!isSupported()) {
      btnOn.disabled = true;
      btnOn.textContent = "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Web Push";
      return;
    }
    try {
      const reg = await getReg();
      if (!reg) return;
      const sub = await reg.pushManager.getSubscription();
      if (sub) {
        btnOn.textContent = "‚úÖ ƒê√£ b·∫≠t th√¥ng b√°o";
        btnOn.disabled = true;
        btnOff.style.display = "";
      } else {
        btnOn.textContent = "üì£ B·∫≠t th√¥ng b√°o tr√™n ƒëi·ªán tho·∫°i";
        btnOn.disabled = false;
        btnOff.style.display = "none";
      }
    } catch (e) {
      console.warn(e);
    }
  }

  async function enablePush() {
    try {
      if (!isSupported()) {
        alert("Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Web Push.");
        return;
      }

      // Xin quy·ªÅn
      if (Notification.permission === "default") {
        const p = await Notification.requestPermission();
        if (p !== "granted") {
          alert("B·∫°n ƒë√£ ch·∫∑n th√¥ng b√°o.");
          return;
        }
      } else if (Notification.permission !== "granted") {
        alert("B·∫°n ƒë√£ ch·∫∑n th√¥ng b√°o.");
        return;
      }

      // L·∫•y VAPID public key t·ª´ server
      const { publicKey } = await window.__adminFetch("/api/push/publicKey");
      if (!publicKey) {
        alert("Server ch∆∞a c·∫•u h√¨nh Web Push (thi·∫øu VAPID_PUBLIC/PRIVATE).");
        return;
      }

      const reg = await getReg();
      if (!reg) {
        alert("Kh√¥ng ƒëƒÉng k√Ω ƒë∆∞·ª£c Service Worker.");
        return;
      }

      // N·∫øu ƒë√£ c√≥ subscription th√¨ th√¥i
      const existed = await reg.pushManager.getSubscription();
      if (existed) {
        new Notification("B·∫°n ƒë√£ b·∫≠t th√¥ng b√°o r·ªìi!");
        btnOn.textContent = "‚úÖ ƒê√£ b·∫≠t th√¥ng b√°o";
        btnOn.disabled = true;
        btnOff.style.display = "";
        return;
      }

      const sub = await reg.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(publicKey),
      });

      // G·ª≠i subscription l√™n server
      await window.__adminFetch("/api/push/subscribe", {
        method: "POST",
        body: JSON.stringify(sub),
      });

      new Notification("ƒê√£ b·∫≠t th√¥ng b√°o ƒë∆°n m·ªõi!");
      await refreshButtons();
    } catch (e) {
      console.error(e);
      alert("Kh√¥ng b·∫≠t ƒë∆∞·ª£c th√¥ng b√°o: " + (e?.message || e));
    }
  }

  async function disablePush() {
    try {
      const reg = await getReg();
      if (!reg) return;
      const sub = await reg.pushManager.getSubscription();
      if (!sub) {
        await refreshButtons();
        return;
      }
      const endpoint = sub.endpoint;
      await sub.unsubscribe().catch(() => {});
      // b√°o server xo√°
      await window.__adminFetch("/api/push/unsubscribe", {
        method: "POST",
        body: JSON.stringify({ endpoint }),
      });
      await refreshButtons();
      alert("ƒê√£ t·∫Øt th√¥ng b√°o.");
    } catch (e) {
      console.error(e);
      alert("Kh√¥ng t·∫Øt ƒë∆∞·ª£c th√¥ng b√°o: " + (e?.message || e));
    }
  }

  btnOn.addEventListener("click", enablePush);
  btnOff.addEventListener("click", disablePush);

  // L√∫c v√†o trang, c·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
  if (isSupported()) {
    navigator.serviceWorker.register("/sw.js").catch(() => {});
    refreshButtons();
  }
})();
